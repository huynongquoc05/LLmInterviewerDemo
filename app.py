from flask import Flask, request, jsonify, render_template, send_file
from pymongo import MongoClient
from LLMInterviewer3 import AdaptiveInterviewer
from gtts import gTTS
import os
import tempfile
import uuid
import threading
import time
from datetime import datetime, timedelta

# K·∫øt n·ªëi MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["interviewer_ai"]
collection = db["interview_results"]

# Kh·ªüi t·∫°o Flask + Interviewer
app = Flask(__name__)
interviewer = AdaptiveInterviewer()

# Th∆∞ m·ª•c l∆∞u tr·ªØ audio t·∫°m th·ªùi
AUDIO_FOLDER = "temp_audio"
if not os.path.exists(AUDIO_FOLDER):
    os.makedirs(AUDIO_FOLDER)

# Dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin audio files
audio_cache = {}


def clean_old_audio_files():
    """X√≥a c√°c file audio c≈© h∆°n 1 gi·ªù"""
    try:
        now = datetime.now()
        for filename in os.listdir(AUDIO_FOLDER):
            file_path = os.path.join(AUDIO_FOLDER, filename)
            if os.path.isfile(file_path):
                file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                if now - file_time > timedelta(hours=1):
                    os.remove(file_path)
                    print(f"ƒê√£ x√≥a file audio c≈©: {filename}")
    except Exception as e:
        print(f"L·ªói khi x√≥a file audio c≈©: {e}")

def cleanup_temp_files():
    """X√≥a t·∫•t c·∫£ file t·∫°m khi k·∫øt th√∫c ch∆∞∆°ng tr√¨nh"""
    try:
        for filename in os.listdir(AUDIO_FOLDER):
            file_path = os.path.join(AUDIO_FOLDER, filename)
            if os.path.isfile(file_path):
                os.remove(file_path)
                print(f"ƒê√£ x√≥a file t·∫°m: {filename}")
    except Exception as e:
        print(f"L·ªói khi x√≥a file t·∫°m: {e}")


def create_audio_from_text(text, lang='vi'):
    """
    T·∫°o file audio t·ª´ text b·∫±ng gTTS

    Args:
        text (str): VƒÉn b·∫£n c·∫ßn chuy·ªÉn th√†nh gi·ªçng n√≥i
        lang (str): Ng√¥n ng·ªØ ('vi' cho ti·∫øng Vi·ªát, 'en' cho ti·∫øng Anh)

    Returns:
        str: T√™n file audio ƒë∆∞·ª£c t·∫°o
    """
    try:
        # T·∫°o t√™n file unique
        audio_id = str(uuid.uuid4())
        audio_filename = f"question_{audio_id}.mp3"
        audio_path = os.path.join(AUDIO_FOLDER, audio_filename)

        # X·ª≠ l√Ω text ƒë·ªÉ t·ªëi ∆∞u cho TTS
        # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c√≥ th·ªÉ g√¢y l·ªói
        clean_text = text.replace("ü§ñ", "").strip()

        # T·∫°o audio b·∫±ng gTTS
        tts = gTTS(text=clean_text, lang=lang, slow=False)
        tts.save(audio_path)

        # L∆∞u th√¥ng tin v√†o cache
        audio_cache[audio_id] = {
            'filename': audio_filename,
            'path': audio_path,
            'created_at': datetime.now(),
            'text': clean_text
        }

        print(f"‚úÖ ƒê√£ t·∫°o audio: {audio_filename}")
        return audio_id

    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o audio: {e}")
        return None


def detect_language(text):
    """
    Ph√°t hi·ªán ng√¥n ng·ªØ c·ªßa vƒÉn b·∫£n (ƒë∆°n gi·∫£n)
    """
    # Ki·ªÉm tra xem c√≥ k√Ω t·ª± ti·∫øng Vi·ªát kh√¥ng
    vietnamese_chars = "√†√°·∫£√£·∫°·∫±·∫Ø·∫≥·∫µ·∫∑·∫ß·∫•·∫©·∫´·∫≠√®√©·∫ª·∫Ω·∫π·ªÅ·∫ø·ªÉ·ªÖ·ªá√¨√≠·ªâƒ©·ªã√≤√≥·ªè√µ·ªç·ªì·ªë·ªï·ªó·ªô·ªù·ªõ·ªü·ª°·ª£√π√∫·ªß≈©·ª•·ª´·ª©·ª≠·ªØ·ª±·ª≥√Ω·ª∑·ªπ·ªµƒë"
    vietnamese_chars += vietnamese_chars.upper()

    if any(char in text for char in vietnamese_chars):
        return 'vi'
    else:
        return 'en'


@app.route("/")
def index():
    # Cleanup old audio files khi kh·ªüi ƒë·ªông
    clean_old_audio_files()
    return render_template("index.html")


@app.route("/start", methods=["POST"])
def start():
    data = request.json
    candidate = data["candidate"]
    topic = data["topic"]
    outline = data.get("outline", None)  # NEW: L·∫•y outline t·ª´ request

    # NEW: Truy·ªÅn outline v√†o start_interview
    result = interviewer.start_interview(candidate, topic, outline)
    # T·∫°o audio cho c√¢u h·ªèi ƒë·∫ßu ti√™n
    if "question" in result:
        question_text = result["question"]
        lang = detect_language(question_text)

        # T·∫°o audio trong background thread ƒë·ªÉ kh√¥ng block response
        def create_audio_async():
            audio_id = create_audio_from_text(question_text, lang)
            if audio_id:
                # C·∫≠p nh·∫≠t result v·ªõi audio_id (c√≥ th·ªÉ l∆∞u v√†o session ho·∫∑c cache)
                result["audio_id"] = audio_id

        # T·∫°o audio ƒë·ªìng b·ªô ƒë·ªÉ tr·∫£ v·ªÅ lu√¥n
        audio_id = create_audio_from_text(question_text, lang)
        if audio_id:
            result["audio_id"] = audio_id
            result["audio_url"] = f"/audio/{audio_id}"

    return jsonify(result)


@app.route("/answer", methods=["POST"])
def answer():
    data = request.json
    candidate, answer = data["candidate"], data["answer"]

    result = interviewer.submit_answer(candidate, answer)

    # N·∫øu ph·ªèng v·∫•n ch∆∞a k·∫øt th√∫c v√† c√≥ c√¢u h·ªèi ti·∫øp theo
    if not result.get("finished") and "next_question" in result:
        question_text = result["next_question"]
        lang = detect_language(question_text)

        # T·∫°o audio cho c√¢u h·ªèi ti·∫øp theo
        audio_id = create_audio_from_text(question_text, lang)
        if audio_id:
            result["audio_id"] = audio_id
            result["audio_url"] = f"/audio/{audio_id}"

    # L∆∞u k·∫øt qu·∫£ v√†o MongoDB n·∫øu ph·ªèng v·∫•n k·∫øt th√∫c
    if result.get("finished"):
        insert_result = collection.insert_one(result["summary"])
        result["summary"]["_id"] = str(insert_result.inserted_id)

    return jsonify(result)


@app.route("/audio/<audio_id>")
def serve_audio(audio_id):
    """
    Endpoint ƒë·ªÉ ph·ª•c v·ª• file audio
    """
    try:
        if audio_id in audio_cache:
            audio_path = audio_cache[audio_id]['path']
            if os.path.exists(audio_path):
                return send_file(
                    audio_path,
                    mimetype="audio/mpeg",
                    as_attachment=False,
                    download_name=f"question_{audio_id}.mp3"
                )

        return jsonify({"error": "Audio file not found"}), 404

    except Exception as e:
        print(f"L·ªói khi ph·ª•c v·ª• audio: {e}")
        return jsonify({"error": "Error serving audio file"}), 500


@app.route("/audio/info/<audio_id>")
def audio_info(audio_id):
    """
    Endpoint ƒë·ªÉ l·∫•y th√¥ng tin v·ªÅ audio file
    """
    if audio_id in audio_cache:
        info = audio_cache[audio_id].copy()
        info['created_at'] = info['created_at'].isoformat()
        info.pop('path', None)  # Kh√¥ng tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file
        return jsonify(info)

    return jsonify({"error": "Audio not found"}), 404


@app.route("/test-tts", methods=["POST"])
def test_tts():
    """
    Endpoint ƒë·ªÉ test t√≠nh nƒÉng TTS
    """
    data = request.json
    text = data.get("text", "Xin ch√†o, ƒë√¢y l√† b√†i test text-to-speech")
    lang = data.get("lang", "vi")

    audio_id = create_audio_from_text(text, lang)
    if audio_id:
        return jsonify({
            "success": True,
            "audio_id": audio_id,
            "audio_url": f"/audio/{audio_id}",
            "text": text,
            "language": lang
        })
    else:
        return jsonify({
            "success": False,
            "error": "Failed to create audio"
        }), 500


# Background task ƒë·ªÉ d·ªçn d·∫πp file audio ƒë·ªãnh k·ª≥
def cleanup_scheduler():
    """
    Ch·∫°y cleanup m·ªói 30 ph√∫t
    """
    while True:
        time.sleep(30 * 60)  # 30 ph√∫t
        clean_old_audio_files()

        # D·ªçn d·∫πp cache
        now = datetime.now()
        expired_keys = []
        for audio_id, info in audio_cache.items():
            if now - info['created_at'] > timedelta(hours=1):
                expired_keys.append(audio_id)

        for key in expired_keys:
            audio_cache.pop(key, None)

        if expired_keys:
            print(f"ƒê√£ x√≥a {len(expired_keys)} audio cache entries")


if __name__ == "__main__":
    # Kh·ªüi ƒë·ªông background cleanup thread
    cleanup_thread = threading.Thread(target=cleanup_scheduler, daemon=True)
    cleanup_thread.start()

    print("üöÄ Server ƒëang kh·ªüi ƒë·ªông...")
    print("üîä Text-to-Speech ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t")
    print("üìÅ Audio files ƒë∆∞·ª£c l∆∞u t·∫°i:", AUDIO_FOLDER)

    app.run(debug=True, threaded=True)
    #X√≥a file t·∫°m khi k·∫øt th√∫c
    cleanup_temp_files()

